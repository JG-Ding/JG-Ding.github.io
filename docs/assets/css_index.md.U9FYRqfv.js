import{_ as e,c as s,o as i,a1 as a}from"./chunks/framework.CceCxLSN.js";const q=JSON.parse('{"title":"css","description":"","frontmatter":{},"headers":[],"relativePath":"css/index.md","filePath":"css/index.md"}'),o={name:"css/index.md"},l=a('<h1 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h1><p>在工程化项目中，css的规模非常大，并且css本身具有混乱debuff，管理起来非常痛苦。css的解决方案有很多，但是多也造成了技术选型的困难。</p><h2 id="常见的技术" tabindex="-1">常见的技术 <a class="header-anchor" href="#常见的技术" aria-label="Permalink to &quot;常见的技术&quot;">​</a></h2><ol><li>css预处理器。代表技术<strong>Sass</strong>。Sass赋予了css一定的高级语言特性，增强了css简陋的语言能力，其中包括： <ul><li>css模块化。通过<code>@use</code>和<code>@forward</code>指令实现，在一定程度上解决了，css的样式模块管理和样式隔离；</li><li>变量、数据容器。分别通过<code>$</code>符号和<code>#{}</code>插值语法，<code>list</code>和<code>map</code>等进行使用，增加了css语言的动态性和灵活性，减少了代码冗余；</li><li>流程控制和函数。分别通过<code>@for</code>、<code>@while</code>、<code>@if</code>等流程控制语句进行使用，<code>@function</code>、<code>@return</code>和css函数调用，增加了代码逻辑的复用能力；</li><li>继承和混入。通过<code>%</code>选择器和<code>@extend</code>，<code>@mixin</code>和<code>@include</code>进行使用，提高了css样式复用能力；</li></ul></li><li>css后处理器，<strong>PostCSS</strong>技术。被广泛集成在打包工具中的技术，统一对css源代码进行额外的加工处理。PostCSS是一套css的处理流水线，上面的每一道工序都作为一个插件进行添加，开发者可以选择自己想要的插件进行灵活添加。常见的PostCSS插件有： <ul><li>css module。在js中以JSON的形式导入css文件，返回开发时类名到混淆后的类名的映射，解决css命名冲突的问题。</li><li>autoprefixer。自动对css规则进行浏览器前缀添加。</li><li>nanocss。将css文件进行压缩和分包。</li><li>stylelint。对css文件进行lint检查。</li><li>preset env。对css较新的特性和语法进行polyfill和降级处理。</li><li>tailwindcss。css框架。预设类名工具集、预设主题设计系统。</li><li>……</li></ul></li><li>cij。css in js。在React框架的生态中广泛使用。主要的形式包括： <ul><li>inline style，直接使用js object绑定到行内样式属性和行内css变量，js 联动 css首选方案。</li><li>style runtime，直接在js中写css文本、js object，返回混淆过的类名或者组件，通过style runtime自动在head里添加style标签或者link标签，如emotion、styled-component，基本满足需要普通开发需求，不能使用scss语法，不享受post css，不要进行响应式绑定(因为性能)。</li><li>styled-jsx，直接在jsx中写style元素，通过编译将style元素进行移除，从而生成style标签。</li></ul></li><li>vue scoped。这是vue单文件编译能力的附加品，可以说是业界中非常全能的方案了，不过，在进行SSR渲染的时候，会导致html文件膨胀。</li></ol><h2 id="tailwindcss" tabindex="-1">tailwindcss <a class="header-anchor" href="#tailwindcss" aria-label="Permalink to &quot;tailwindcss&quot;">​</a></h2><p>tailwind是css原子化框架，以css后处理器的形式实现，为css提供了一组开箱即用的原子类型、一套优雅规范的设计系统、一个简单易用的样式生成器，为开发者提供便利和约束。它显著提高开发效率的同时，提高了css的复用性和组合性。</p><h3 id="主题系统" tabindex="-1">主题系统 <a class="header-anchor" href="#主题系统" aria-label="Permalink to &quot;主题系统&quot;">​</a></h3><p>强大的预定义变体，可以灵活地定义原子级的样式，从而轻松更换，包含三个子系统 颜色系统colors、尺寸系统spacing、响应系统screens（responsive），三个子系统精确地抽象了平时开发中最常用的内容，并将其可操作化</p><h3 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h3><p><code>@tailwind</code>指令可以让用户无须关心路径，对tailwind的内置资源进行导入。 <code>@apply</code>指令让用户在指定区域内展开一组tailwind类的内容。</p><h3 id="内置资源" tabindex="-1">内置资源 <a class="header-anchor" href="#内置资源" aria-label="Permalink to &quot;内置资源&quot;">​</a></h3><p>包括在三个layer中</p><ol><li>基础规则Base，在layer base层中，直接作用于普通元素的全局样式；</li><li>工具集合Utilities，在layer utilities中，代表一个css样式的一系列预定义的原子值，表现为一个类名；</li><li>组件Components，在layer components中，代表一个预定预定义的css class和样式，它可以被tailwind识别并加入tailwind的组合系统当中，表现为一组类名</li></ol><ul><li>注：Utilities更加松散，为一些基础类，Components是成块的逻辑块，并且Component中的类一般依赖于已经定义好的Utilities，通过@apply衍生基础类</li></ul><h3 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Modifier:class</span></span></code></pre></div><p><code>Modifier</code>可以有多个，最后一个是class，这两个位置也可以是方括号中加上一个&quot;任意值&quot;，表示临时属性。</p><h3 id="变体" tabindex="-1">变体 <a class="header-anchor" href="#变体" aria-label="Permalink to &quot;变体&quot;">​</a></h3><p>变体Variant与修饰符Modifier，tailwind给定一个修饰符代表一个类别产生作用时需要的条件，它被抽象成一个Variant，同时具象为一个css选择器加上一个花括号，被修饰的component将被限定在其中，这使得tailwind可以简单抽象一种状态、一类元素、一个通用属性，并能够方便快捷地与其他类别进行组合。 这个操作相当于条件判断，只有满足了该条件再声明相应的样式。例如：<code>hover:</code>、<code>xl:</code>、<code>after:</code>等等。</p><h3 id="任意值" tabindex="-1">任意值 <a class="header-anchor" href="#任意值" aria-label="Permalink to &quot;任意值&quot;">​</a></h3><p>任意值Arbitrary和声明式函数调用。</p><ul><li>类名位置处，<code>class1-[p1]</code>相当于调用动态Utilities &quot;class1&quot;或者动态Components &quot;class1&quot;函数，并传入参数&quot;p1&quot;，并产生动态样式，<code>[styleName:styleValue]</code>相当于退化为完全的行内样式，与style属性中填写的行内样式类似；</li><li>修饰符位置处，<code>modi1-[p1]:</code>相当于调用动态Variant &quot;modi1&quot;，并出入参数&quot;p1&quot;，并产生动态条件，匹配动态的条件，<code>[atrr1=value1]</code>或者<code>[&amp;:hover]</code>相当于退化为手动写选择器，需要有&quot;&amp;&quot;站位,不占位则默认在最前面,&quot;[&quot;后面一个的位置处。</li></ul>',22),t=[l];function c(d,n,r,u,p,h){return i(),s("div",null,t)}const f=e(o,[["render",c]]);export{q as __pageData,f as default};
